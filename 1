import nest_asyncio
nest_asyncio.apply()
import asyncio
import json
import threading
import multiprocessing
import time
import hashlib
import struct
import requests
import re

LATEST          = ""
HTTP_SERVER_URL = "http://sandbox.abdee.ir"
CORES           = multiprocessing.cpu_count()
USERNAME        = "K_CPU_1"
USERNAME        = "Test_Abdi_Laptop"

def send(json_data, timeout=30, retries=5, retry_delay=2):
    headers = {
        "X-USERNAME":   USERNAME,
        "X-CORES":      str(CORES),
        "Content-Type": "application/json"
    }
    for attempt in range(retries):
        try:
            response = requests.get(HTTP_SERVER_URL, headers=headers, params=json_data, timeout=timeout)
            if response.status_code == 200:
                print("Request successful!")
                return response.json()
            else:
                print(f"Attempt {attempt+1} failed with status code {response.status_code}")
        except requests.RequestException as e:
            print(f"Attempt {attempt+1} failed with error: {e}")

        if attempt < retries - 1:
            time.sleep(retry_delay)
    print("All attempts failed.")
    return None

def double(data):
    return hashlib.sha256(hashlib.sha256(data).digest()).digest()

def bits_to_target(bits):
    """Convert compact format 'bits' to target threshold."""
    exponent = bits >> 24  # First byte is exponent
    coefficient = bits & 0xFFFFFF  # Last three bytes are coefficient
    target = coefficient * (2 ** (8 * (exponent - 3)))
    return target

def check_hash_satisfies_difficulty(hash_hex, bits):
    """Check if the given SHA-256 hash satisfies the difficulty (bits)."""
    target = bits_to_target(bits)
    hash_int = int(hash_hex, 16)  # Convert hash from hex to integer
    return hash_int <= target

def process_range_worker(start, end, core_number, VERSION, BITS, ZERO, PREVIOUS, MERKEL, TIMESTAMP, BLOCKNO):
    """Worker function for parallel processing. Takes a tuple (start, end, core_number)."""
    print(f"üõ†Ô∏è [Core {core_number}] Processing range {start:,} to {end:,}")
    
    start = start // 10
    end   = end // 10
    
    for nonce in range(start, end):
        header = (
            struct.pack("<L", VERSION) +
            bytes.fromhex(PREVIOUS)[::-1] +
            bytes.fromhex(MERKEL)[::-1] + 
            struct.pack("<L", TIMESTAMP) +
            struct.pack("<I", BITS) +
            struct.pack("<I", nonce) #nonce is awlays chaning
        )
        
        hash_result = double(header)[::-1].hex()
        count       = COUNT(hash_result)
        if count >= (ZERO - 1):
            if check_hash_satisfies_difficulty(hash_result, BITS):
                print("‚úÖ ‚úÖ The hash satisfies the difficulty target. ‚úÖ ‚úÖ")
                # await ws.send(json.dumps({"type": "found", "hash": hash_result, "version": VERSION, "previous": PREVIOUS, "merkel": MERKEL, "timestamp": TIMESTAMP, 'bits': BITS, 'nonce': nonce}))
                notify(f"‚úÖ ‚úÖ {hash_result} ‚úÖ ‚úÖ")
                notify(f"‚úÖ ‚úÖ Hash Found! ‚úÖ ‚úÖ")
                found = json.dumps({"type": "found", "hash": hash_result, "version": VERSION, "previous": PREVIOUS, "merkel": MERKEL, "timestamp": TIMESTAMP, 'bits': BITS, 'nonce': nonce, 'blockno': BLOCKNO})
                response = send( {"type": "found", "hash": hash_result, "version": VERSION, "previous": PREVIOUS, "merkel": MERKEL, "timestamp": TIMESTAMP, 'bits': BITS, 'nonce': nonce, 'blockno': BLOCKNO} )
                notify( "Server Reponse: ", response )
                notify( found )
                return found
                # return hash_result
            else:
                # print("The Hash Not Accepted!")
                notify(f"[üü°] Hash {hash_result} Had X{count} 0's, But Not accepted!", type='error')
                
                # Test
                # response = send( {"type": "found", "hash": hash_result, "version": VERSION, "previous": PREVIOUS, "merkel": MERKEL, "timestamp": TIMESTAMP, 'bits': BITS, 'nonce': nonce, 'blockno': BLOCKNO} )
                # response = send( {"type": "found", "hash": hash_result, "version": 536870912, "previous": "000000000b0dbf37ebf8599e81c37f703b5a643e5ae27e27740c9d370f532d5c", "merkel": "cb0653937b6e0d3f539b0c4274b114dab90750897682f80803df56e38a1e3508", "timestamp": 1743000515, 'bits': 486604799, 'nonce': 1371167420, 'blockno': 74886} )
                # notify( "Server Reponse: ", response )
                
                # notify(f"‚úÖ ‚úÖ ALAKI {hash_result} ALAKI ‚úÖ ‚úÖ")
                # notify(f"‚úÖ ‚úÖ Hash Found! ‚úÖ ‚úÖ")
                # found = json.dumps({"type": "found", "hash": hash_result, "version": 536870912, "previous": "000000000b0dbf37ebf8599e81c37f703b5a643e5ae27e27740c9d370f532d5c", "merkel": "cb0653937b6e0d3f539b0c4274b114dab90750897682f80803df56e38a1e3508", "timestamp": 1743000515, 'bits': 486604799, 'nonce': 1371167420, 'blockno': 74886})
                # notify( found )
                # return found
            
    return 0

async def process_final_result(results):
    """Processes the results to determine the final output.
    - If all results are numbers, return their sum.
    - If any result is a string, return that string.
    """
    final_result = 0  # Default to zero
    for result in results:
        if isinstance(result, str):  # If any result is a string, return it
            # await ws.send(result)
            # data = json.loads(result) #Send the whole JSON to SERVER {Type: Found}
            return result
        final_result += result  # Otherwise, sum numeric values
    return final_result  # Return sum if no strings were found

async def handle_ranges():
    processing_range = False
    while True:
        try:
            if not processing_range:
                data = send({"type": "requestRange"})
                processing_range = True
                VERSION   = int(data['version'])
                BITS      = int(data['bits'])
                ZERO      = int(data['zero'])
                PREVIOUS  = data['previous']
                MERKEL    = data['merkel']
                BLOCKNO   = data['blockno']
                TIMESTAMP = data['range']['timestamp']
                assigned_range = data['range']
                assigned_range["range_start"] = int(assigned_range["range_start"])
                assigned_range["range_end"] = int(assigned_range["range_end"])
                total_numbers = assigned_range["range_end"] - assigned_range["range_start"] + 1
                num_cores = CORES
                chunk_size = total_numbers // num_cores

                ranges = [
                    (
                        assigned_range["range_start"] + i * chunk_size,  # Start
                        min(assigned_range["range_start"] + (i + 1) * chunk_size - 1, assigned_range["range_end"]),  # End
                        i + 1,  # Core number
                        VERSION,  # VERSION
                        BITS,     # BITS
                        ZERO,     # ZERO
                        PREVIOUS, # PREVIOUS
                        MERKEL,   # MERKEL
                        TIMESTAMP,# TIMESTAMP
                        BLOCKNO,# TIMESTAMP
                    )
                    for i in range(num_cores)
                ]
                
                print(f"‚ö° [ID {assigned_range['id']}] Processing {total_numbers:,} numbers across {num_cores} CPU cores.")

                start_time = time.time()

                # Run all workers in true parallel using ProcessPoolExecutor
                with multiprocessing.Pool(processes=num_cores) as pool:
                    results = pool.starmap(process_range_worker, ranges)
                    

                final_result = await process_final_result(results)
                elapsed_time = time.time() - start_time
                
                print("‚ö° ‚ö° Final Result :")
                print("")
                print("")
                print(final_result)
                print("")
                print("")
                
                response = send({"type": "completeRange", "result": final_result, "range_start": assigned_range["range_start"], "range_end": assigned_range["range_end"], "elapsed_time": elapsed_time})
                
                print(f"‚úÖ [ID {assigned_range['id']}] Completed range {assigned_range['range_start']:,} - {assigned_range['range_end']:,} in {elapsed_time:.2f} seconds with result: {final_result}")
                
                print("Server Reponse: ", response)
                processing_range = False
        except Exception as e:
            print(f"‚ùå Error: {e}")

def COUNT(x):
    match = re.match(r"^0*", x)
    return len(match.group(0)) if match else 0

def notify(msg, type="success", retries=5, delay=1):
    # print(f"‚ùå Telegram Max retries reached. [notify_{type}]")
    # print("Message was:")
    print(msg)
    return None
    # for attempt in range(retries):
    #     try:
    #         if type == 'success':
    #             requests.post("https://api.telegram.org/bot7306877915:AAHR-EDl87kj1eiLVWUxyiHnaQoiJUTW8Fc/sendMessage", data={"chat_id": "567639577","text": msg,"parse_mode": "Markdown"})
    #         else:
    #             requests.post("https://api.telegram.org/bot7306877915:AAHR-EDl87kj1eiLVWUxyiHnaQoiJUTW8Fc/sendMessage", data={"chat_id": "567639577","text": msg,"parse_mode": "Markdown"})
    #     except Exception as e:
    #         print(f"‚ö†Ô∏è Telegram Connection failed [notify_{type}] (Attempt {attempt + 1}/{retries}): {e}")
    #         if attempt < retries - 1:
    #             await asyncio.sleep(delay)
    #         else:
    #             print(f"‚ùå Telegram Max retries reached. [notify_{type}]")
    #             print("Message was:")
    #             print(msg)
    #             return None

def update_the_latest(timeout=5, interval=10):
    global LATEST
    while True:
        try:
            response = requests.get("https://mempool.space/testnet4/api/blocks/tip/hash", timeout=timeout)
            if response.status_code == 200:
                LATEST = response.text
                if True:
                    print("üü¢ LATEST updated: ", LATEST)
            else:
                print(f"üî¥ Failed to fetch data. Status code: {response.status_code} /// {response}")
        except requests.RequestException as e:
            print(f"Request error: {e}")
        time.sleep(interval)

def background_updater():
    thread = threading.Thread(target=update_the_latest, daemon=True)
    thread.start()

async def main():
    background_updater() # BackGroud Working ...
    while True:
        try:
            await handle_ranges()
        except Exception as e:
            print(f"‚ùå main() Error: {e}")
            break
    print("üî¥ üî¥ üî¥ üî¥ üî¥ Program Died! üî¥ üî¥ üî¥ üî¥ üî¥")
    
#if __name__ == '__main__':
asyncio.run(main())
